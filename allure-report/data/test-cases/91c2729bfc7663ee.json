{"uid":"91c2729bfc7663ee","name":"test_add_enterprise_category[payload0-500]","fullName":"test_enterprise_category.TestEnterpriseCategory#test_add_enterprise_category","historyId":"9878c7b9a4939067e0e2d7903efe86e3","time":{"start":1745804692804,"stop":1745804692836,"duration":32},"status":"failed","statusMessage":"AssertionError: assert 405 == 500\n +  where 405 = <Response [405]>.status_code","statusTrace":"self = <test_enterprise_category.TestEnterpriseCategory object at 0x00000181A4A53250>\npayload = {'categoryName': '123456', 'createdAt': '2025-04-27T10:10:23.864Z', 'description': '123456', 'parentId': None, ...}\nexpected_code = 500\n\n    @allure.story(\"添加企业内部法规分类\")\n    @pytest.mark.parametrize(\"payload, expected_code\", [\n        ({\n            \"tenantId\": 9007199254740991,\n            \"categoryName\": \"123456\",\n            \"parentId\": None,\n            \"description\": \"123456\",\n            \"createdAt\": \"2025-04-27T10:10:23.864Z\",\n            \"updatedAt\": \"2025-04-27T10:10:23.864Z\"\n        }, 500)  # 示例响应为500，实际应为200，视后端实现调整\n    ])\n    def test_add_enterprise_category(self, payload, expected_code):\n        url = f\"{BASE_URL}/whiskerguardregulatoryservice/api/enterprise/categories/create\"\n        with allure.step(\"发送添加企业内部法规分类请求\"):\n            response = requests.post(url, json=payload)\n        with allure.step(\"断言响应状态码和返回字段\"):\n>           assert response.status_code == expected_code\nE           assert 405 == 500\nE            +  where 405 = <Response [405]>.status_code\n\ntest_enterprise_category.py:25: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 405 == 500\n +  where 405 = <Response [405]>.status_code","statusTrace":"self = <test_enterprise_category.TestEnterpriseCategory object at 0x00000181A4A53250>\npayload = {'categoryName': '123456', 'createdAt': '2025-04-27T10:10:23.864Z', 'description': '123456', 'parentId': None, ...}\nexpected_code = 500\n\n    @allure.story(\"添加企业内部法规分类\")\n    @pytest.mark.parametrize(\"payload, expected_code\", [\n        ({\n            \"tenantId\": 9007199254740991,\n            \"categoryName\": \"123456\",\n            \"parentId\": None,\n            \"description\": \"123456\",\n            \"createdAt\": \"2025-04-27T10:10:23.864Z\",\n            \"updatedAt\": \"2025-04-27T10:10:23.864Z\"\n        }, 500)  # 示例响应为500，实际应为200，视后端实现调整\n    ])\n    def test_add_enterprise_category(self, payload, expected_code):\n        url = f\"{BASE_URL}/whiskerguardregulatoryservice/api/enterprise/categories/create\"\n        with allure.step(\"发送添加企业内部法规分类请求\"):\n            response = requests.post(url, json=payload)\n        with allure.step(\"断言响应状态码和返回字段\"):\n>           assert response.status_code == expected_code\nE           assert 405 == 500\nE            +  where 405 = <Response [405]>.status_code\n\ntest_enterprise_category.py:25: AssertionError","steps":[{"name":"发送添加企业内部法规分类请求","time":{"start":1745804692804,"stop":1745804692835,"duration":31},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"断言响应状态码和返回字段","time":{"start":1745804692835,"stop":1745804692835,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 405 == 500\n +  where 405 = <Response [405]>.status_code\n","statusTrace":"  File \"C:\\Users\\piliz\\AI_test_platform\\test_enterprise_category.py\", line 25, in test_add_enterprise_category\n    assert response.status_code == expected_code\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":2,"attachmentStep":false,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"feature","value":"法律法规管理服务-企业内部制度类别"},{"name":"story","value":"添加企业内部法规分类"},{"name":"suite","value":"test_enterprise_category"},{"name":"subSuite","value":"TestEnterpriseCategory"},{"name":"host","value":"PILIZHEN"},{"name":"thread","value":"26588-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_enterprise_category"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_code","value":"500"},{"name":"payload","value":"{'tenantId': 9007199254740991, 'categoryName': '123456', 'parentId': None, 'description': '123456', 'createdAt': '2025-04-27T10:10:23.864Z', 'updatedAt': '2025-04-27T10:10:23.864Z'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c9a9ddb8d0beab41","status":"failed","statusDetails":"AssertionError: assert 405 == 500\n +  where 405 = <Response [405]>.status_code","time":{"start":1745804611845,"stop":1745804611893,"duration":48}}],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"91c2729bfc7663ee.json","parameterValues":["500","{'tenantId': 9007199254740991, 'categoryName': '123456', 'parentId': None, 'description': '123456', 'createdAt': '2025-04-27T10:10:23.864Z', 'updatedAt': '2025-04-27T10:10:23.864Z'}"]}