{"uid":"beb52c2c15fd0018","name":"test_add_enterprise_category[payload0-200]","fullName":"test_enterprise_category.TestEnterpriseCategory#test_add_enterprise_category","historyId":"f6dbb29343a1293870be017f6d7aa699","time":{"start":1745806735516,"stop":1745806735648,"duration":132},"status":"failed","statusMessage":"AssertionError: assert 401 == 200\n +  where 401 = <Response [401]>.status_code","statusTrace":"self = <test_enterprise_category.TestEnterpriseCategory object at 0x00000239ECA9EE90>\npayload = {'categoryName': '123456', 'createdAt': '2025-04-27T10:10:23.864Z', 'description': '123456', 'parentId': None, ...}\nexpected_code = 200\n\n    @allure.story(\"添加企业内部法规分类\")\n    @pytest.mark.parametrize(\"payload, expected_code\", [\n        (\n            {\n                \"tenantId\": 9007199254740991,\n                \"categoryName\": \"123456\",\n                \"parentId\": None,\n                \"description\": \"123456\",\n                \"createdAt\": \"2025-04-27T10:10:23.864Z\",\n                \"updatedAt\": \"2025-04-27T10:10:23.864Z\"\n            },\n            200\n        )\n    ])\n    def test_add_enterprise_category(self, payload, expected_code):\n        url = f\"{BASE_URL}/services/whiskerguardregulatoryservice/api/enterprise/categories/create\"\n        headers = {\"Content-Type\": \"application/json\"}\n        response = requests.post(url, json=payload, headers=headers)\n    \n        # 调试输出\n        print(\"▶▶▶ URL:\", url)\n        print(\"▶▶▶ 方法: POST\")\n        print(\"▶▶▶ 返回码:\", response.status_code)\n        print(\"▶▶▶ 返回体:\", response.text[:200])\n    \n>       assert response.status_code == expected_code\nE       assert 401 == 200\nE        +  where 401 = <Response [401]>.status_code\n\ntest_enterprise_category.py:35: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 401 == 200\n +  where 401 = <Response [401]>.status_code","statusTrace":"self = <test_enterprise_category.TestEnterpriseCategory object at 0x00000239ECA9EE90>\npayload = {'categoryName': '123456', 'createdAt': '2025-04-27T10:10:23.864Z', 'description': '123456', 'parentId': None, ...}\nexpected_code = 200\n\n    @allure.story(\"添加企业内部法规分类\")\n    @pytest.mark.parametrize(\"payload, expected_code\", [\n        (\n            {\n                \"tenantId\": 9007199254740991,\n                \"categoryName\": \"123456\",\n                \"parentId\": None,\n                \"description\": \"123456\",\n                \"createdAt\": \"2025-04-27T10:10:23.864Z\",\n                \"updatedAt\": \"2025-04-27T10:10:23.864Z\"\n            },\n            200\n        )\n    ])\n    def test_add_enterprise_category(self, payload, expected_code):\n        url = f\"{BASE_URL}/services/whiskerguardregulatoryservice/api/enterprise/categories/create\"\n        headers = {\"Content-Type\": \"application/json\"}\n        response = requests.post(url, json=payload, headers=headers)\n    \n        # 调试输出\n        print(\"▶▶▶ URL:\", url)\n        print(\"▶▶▶ 方法: POST\")\n        print(\"▶▶▶ 返回码:\", response.status_code)\n        print(\"▶▶▶ 返回体:\", response.text[:200])\n    \n>       assert response.status_code == expected_code\nE       assert 401 == 200\nE        +  where 401 = <Response [401]>.status_code\n\ntest_enterprise_category.py:35: AssertionError","steps":[],"attachments":[{"uid":"b87acc287ad4afa0","name":"stdout","source":"b87acc287ad4afa0.txt","type":"text/plain","size":182}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"stepsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"feature","value":"法律法规管理服务-企业内部制度类别"},{"name":"story","value":"添加企业内部法规分类"},{"name":"suite","value":"test_enterprise_category"},{"name":"subSuite","value":"TestEnterpriseCategory"},{"name":"host","value":"PILIZHEN"},{"name":"thread","value":"36712-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_enterprise_category"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_code","value":"200"},{"name":"payload","value":"{'tenantId': 9007199254740991, 'categoryName': '123456', 'parentId': None, 'description': '123456', 'createdAt': '2025-04-27T10:10:23.864Z', 'updatedAt': '2025-04-27T10:10:23.864Z'}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"beb52c2c15fd0018.json","parameterValues":["200","{'tenantId': 9007199254740991, 'categoryName': '123456', 'parentId': None, 'description': '123456', 'createdAt': '2025-04-27T10:10:23.864Z', 'updatedAt': '2025-04-27T10:10:23.864Z'}"]}