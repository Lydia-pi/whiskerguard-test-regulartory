{"uid":"c1d6e0d0e4275ce0","name":"test_partial_update_enterprise_category[1-payload0-200]","fullName":"test_enterprise_category.TestEnterpriseCategory#test_partial_update_enterprise_category","historyId":"7c2eeaaa24140198616f4077f2d5995f","time":{"start":1745804611976,"stop":1745804612000,"duration":24},"status":"failed","statusMessage":"AssertionError: assert 405 == 200\n +  where 405 = <Response [405]>.status_code","statusTrace":"self = <test_enterprise_category.TestEnterpriseCategory object at 0x000001D82DDE5BA0>\ncategory_id = 1, payload = {'categoryName': '基本管理制度12', 'id': 1, 'tenantId': 9007199254740991}\nexpected_code = 200\n\n    @allure.story(\"部分更新企业内部法规分类\")\n    @pytest.mark.parametrize(\"category_id, payload, expected_code\", [\n        (\n            1,\n            {\n                \"id\": 1,\n                \"tenantId\": 9007199254740991,\n                \"categoryName\": \"基本管理制度12\"\n            },\n            200\n        )\n    ])\n    def test_partial_update_enterprise_category(self, category_id, payload, expected_code):\n        url = f\"{BASE_URL}/whiskerguardregulatoryservice/api/enterprise/categories/partialUpdate/{category_id}\"\n        with allure.step(\"发送部分更新企业内部法规分类请求\"):\n            response = requests.post(url, json=payload)\n        with allure.step(\"断言响应状态码和返回字段\"):\n>           assert response.status_code == expected_code\nE           assert 405 == 200\nE            +  where 405 = <Response [405]>.status_code\n\ntest_enterprise_category.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 405 == 200\n +  where 405 = <Response [405]>.status_code","statusTrace":"self = <test_enterprise_category.TestEnterpriseCategory object at 0x000001D82DDE5BA0>\ncategory_id = 1, payload = {'categoryName': '基本管理制度12', 'id': 1, 'tenantId': 9007199254740991}\nexpected_code = 200\n\n    @allure.story(\"部分更新企业内部法规分类\")\n    @pytest.mark.parametrize(\"category_id, payload, expected_code\", [\n        (\n            1,\n            {\n                \"id\": 1,\n                \"tenantId\": 9007199254740991,\n                \"categoryName\": \"基本管理制度12\"\n            },\n            200\n        )\n    ])\n    def test_partial_update_enterprise_category(self, category_id, payload, expected_code):\n        url = f\"{BASE_URL}/whiskerguardregulatoryservice/api/enterprise/categories/partialUpdate/{category_id}\"\n        with allure.step(\"发送部分更新企业内部法规分类请求\"):\n            response = requests.post(url, json=payload)\n        with allure.step(\"断言响应状态码和返回字段\"):\n>           assert response.status_code == expected_code\nE           assert 405 == 200\nE            +  where 405 = <Response [405]>.status_code\n\ntest_enterprise_category.py:69: AssertionError","steps":[{"name":"发送部分更新企业内部法规分类请求","time":{"start":1745804611976,"stop":1745804612000,"duration":24},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"断言响应状态码和返回字段","time":{"start":1745804612000,"stop":1745804612000,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 405 == 200\n +  where 405 = <Response [405]>.status_code\n","statusTrace":"  File \"C:\\Users\\piliz\\AI_test_platform\\test_enterprise_category.py\", line 69, in test_partial_update_enterprise_category\n    assert response.status_code == expected_code\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentStep":false,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":2,"attachmentStep":false,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"feature","value":"法律法规管理服务-企业内部制度类别"},{"name":"story","value":"部分更新企业内部法规分类"},{"name":"suite","value":"test_enterprise_category"},{"name":"subSuite","value":"TestEnterpriseCategory"},{"name":"host","value":"PILIZHEN"},{"name":"thread","value":"28416-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_enterprise_category"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"category_id","value":"1"},{"name":"expected_code","value":"200"},{"name":"payload","value":"{'id': 1, 'tenantId': 9007199254740991, 'categoryName': '基本管理制度12'}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"c1d6e0d0e4275ce0.json","parameterValues":["1","200","{'id': 1, 'tenantId': 9007199254740991, 'categoryName': '基本管理制度12'}"]}