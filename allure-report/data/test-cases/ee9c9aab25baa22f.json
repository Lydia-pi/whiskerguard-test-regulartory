{"uid":"ee9c9aab25baa22f","name":"test_get_category_tree[params0-200]","fullName":"test_api.TestEnterpriseCategory#test_get_category_tree","historyId":"9602c57fcbdf851b4ec0e69e0948615d","time":{"start":1745746623178,"stop":1745746623219,"duration":41},"status":"broken","statusMessage":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\nvenv\\Lib\\site-packages\\requests\\models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nE:\\Python\\Lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\nE:\\Python\\Lib\\json\\decoder.py:345: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000001ECC5B506E0>\ns = '<!doctype html>\\n<html class=\"no-js\" lang=\"zh-cn\" dir=\"ltr\">\\n  <head>\\n    <meta charset=\"utf-8\" />\\n    <meta http-...rElm?.style) {\\n          errorElm.style.display = \\'block\\';\\n        }\\n      }\\n    </script>\\n  </body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nE:\\Python\\Lib\\json\\decoder.py:363: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_api.TestEnterpriseCategory object at 0x000001ECC85E9CD0>\nparams = {'tenantId': 'test_tenant_id'}, expected_code = 200\n\n    @allure.story(\"获取指定租户分类的树形结构\")\n    @pytest.mark.parametrize(\"params, expected_code\", [({\"tenantId\": \"test_tenant_id\"}, 200)])\n    def test_get_category_tree(self, params, expected_code):\n        url = f\"{BASE_URL}/whiskerguardregulatoryservice/api/enterprise/categories/tree\"\n        with allure.step(\"发送获取分类树形结构请求\"):\n            response = requests.get(url, params=params)\n        with allure.step(\"断言响应状态码和返回字段\"):\n            assert response.status_code == expected_code\n>           json_data = response.json()\n\ntest_api.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nvenv\\Lib\\site-packages\\requests\\models.py:978: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\nvenv\\Lib\\site-packages\\requests\\models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nE:\\Python\\Lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\nE:\\Python\\Lib\\json\\decoder.py:345: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000001ECC5B506E0>\ns = '<!doctype html>\\n<html class=\"no-js\" lang=\"zh-cn\" dir=\"ltr\">\\n  <head>\\n    <meta charset=\"utf-8\" />\\n    <meta http-...rElm?.style) {\\n          errorElm.style.display = \\'block\\';\\n        }\\n      }\\n    </script>\\n  </body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nE:\\Python\\Lib\\json\\decoder.py:363: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_api.TestEnterpriseCategory object at 0x000001ECC85E9CD0>\nparams = {'tenantId': 'test_tenant_id'}, expected_code = 200\n\n    @allure.story(\"获取指定租户分类的树形结构\")\n    @pytest.mark.parametrize(\"params, expected_code\", [({\"tenantId\": \"test_tenant_id\"}, 200)])\n    def test_get_category_tree(self, params, expected_code):\n        url = f\"{BASE_URL}/whiskerguardregulatoryservice/api/enterprise/categories/tree\"\n        with allure.step(\"发送获取分类树形结构请求\"):\n            response = requests.get(url, params=params)\n        with allure.step(\"断言响应状态码和返回字段\"):\n            assert response.status_code == expected_code\n>           json_data = response.json()\n\ntest_api.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nvenv\\Lib\\site-packages\\requests\\models.py:978: JSONDecodeError","steps":[{"name":"发送获取分类树形结构请求","time":{"start":1745746623178,"stop":1745746623201,"duration":23},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"断言响应状态码和返回字段","time":{"start":1745746623201,"stop":1745746623201,"duration":0},"status":"broken","statusMessage":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n","statusTrace":"  File \"C:\\Users\\piliz\\AI_test_platform\\test_api.py\", line 55, in test_get_category_tree\n    json_data = response.json()\n  File \"C:\\Users\\piliz\\AI_test_platform\\venv\\Lib\\site-packages\\requests\\models.py\", line 978, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"feature","value":"法律法规管理服务-企业内部制度类别"},{"name":"story","value":"获取指定租户分类的树形结构"},{"name":"suite","value":"test_api"},{"name":"subSuite","value":"TestEnterpriseCategory"},{"name":"host","value":"PILIZHEN"},{"name":"thread","value":"29644-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_code","value":"200"},{"name":"params","value":"{'tenantId': 'test_tenant_id'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"470e460f301a285","status":"broken","statusDetails":"requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=3000): Max retries exceeded with url: /whiskerguardregulatoryservice/api/enterprise/categories/tree?tenantId=test_tenant_id (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000001293E31B5C0>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))","time":{"start":1745741634538,"stop":1745741636598,"duration":2060}},{"uid":"46871d7c19fe2d6b","status":"broken","statusDetails":"requests.exceptions.ConnectionError: HTTPConnectionPool(host='127.0.0.1', port=3000): Max retries exceeded with url: /whiskerguardregulatoryservice/api/enterprise/categories/tree?tenantId=test_tenant_id (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000002E6B0FBB5C0>: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。'))","time":{"start":1745741572813,"stop":1745741574865,"duration":2052}}],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"ee9c9aab25baa22f.json","parameterValues":["200","{'tenantId': 'test_tenant_id'}"]}