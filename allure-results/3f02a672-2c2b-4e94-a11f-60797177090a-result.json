{"name": "test_get_category_by_id[test_id-200]", "status": "broken", "statusDetails": {"message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\nvenv\\Lib\\site-packages\\requests\\models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nE:\\Python\\Lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\nE:\\Python\\Lib\\json\\decoder.py:345: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000001ECC5B506E0>\ns = '<!doctype html>\\n<html class=\"no-js\" lang=\"zh-cn\" dir=\"ltr\">\\n  <head>\\n    <meta charset=\"utf-8\" />\\n    <meta http-...rElm?.style) {\\n          errorElm.style.display = \\'block\\';\\n        }\\n      }\\n    </script>\\n  </body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nE:\\Python\\Lib\\json\\decoder.py:363: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_api.TestEnterpriseCategory object at 0x000001ECC8660CB0>, category_id = 'test_id'\nexpected_code = 200\n\n    @allure.story(\"根据分类id查询指定的分类\")\n    @pytest.mark.parametrize(\"category_id, expected_code\", [(\"test_id\", 200)])\n    def test_get_category_by_id(self, category_id, expected_code):\n        url = f\"{BASE_URL}/whiskerguardregulatoryservice/api/enterprise/categories/get/{category_id}\"\n        with allure.step(\"发送根据ID查询分类请求\"):\n            response = requests.get(url)\n        with allure.step(\"断言响应状态码和返回字段\"):\n            assert response.status_code == expected_code\n>           json_data = response.json()\n\ntest_api.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nvenv\\Lib\\site-packages\\requests\\models.py:978: JSONDecodeError"}, "steps": [{"name": "发送根据ID查询分类请求", "status": "passed", "start": 1745746623236, "stop": 1745746623258}, {"name": "断言响应状态码和返回字段", "status": "broken", "statusDetails": {"message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n", "trace": "  File \"C:\\Users\\piliz\\AI_test_platform\\test_api.py\", line 66, in test_get_category_by_id\n    json_data = response.json()\n  File \"C:\\Users\\piliz\\AI_test_platform\\venv\\Lib\\site-packages\\requests\\models.py\", line 978, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n"}, "start": 1745746623258, "stop": 1745746623258}], "parameters": [{"name": "category_id", "value": "'test_id'"}, {"name": "expected_code", "value": "200"}], "start": 1745746623236, "stop": 1745746623258, "uuid": "25abbf1c-f82b-4bf0-b929-48ef836ce6a0", "historyId": "bf6f17d64b21a0267bbd7042b22042a7", "testCaseId": "daaccbf0ac835c995473a972aac3d943", "fullName": "test_api.TestEnterpriseCategory#test_get_category_by_id", "labels": [{"name": "story", "value": "根据分类id查询指定的分类"}, {"name": "feature", "value": "法律法规管理服务-企业内部制度类别"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "TestEnterpriseCategory"}, {"name": "host", "value": "PILIZHEN"}, {"name": "thread", "value": "29644-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_api"}]}